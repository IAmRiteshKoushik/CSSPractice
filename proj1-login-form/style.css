@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;600&display=swap');

:root{

    /* Declaring global CSS variables */
    --primary-color: #ed5967;
    --white-color: #ffffff;
    --radius: 8px;
}

*{
    /* Removing any forms of margins and 
    paddings that some of the modern day 
    browsers tend to add by themselves */
    margin: 0;
    padding: 0;
}

*, ::before, ::after{
    /* When we add in a border box, the size
    of it stays the same as what has been 
    described in the height and width limits
    and is not subjected to change due to 
    padding issues. The box would rather accomodate
    the text differnently than expand by itself. */
    box-sizing: border-box;
}

body{
    font-family: 'Rubik', sans-serif;
    font-size: 16px;
    font-weight: 400;
    line-height: 1.8;
    color: var(--white-color);
}

a{
    /* We carry out the text decoration when
    do not want any unspecified color changes
    to happen to the hyperlinks  */
    text-decoration: none;
    /* With hyperlinks we want the font color
    to be inherited from the color of the text
    we specify in the div. Every div would have
    a different color specified to it hence
    adding this property would allow us 
    to directly inherit the property without
    having to write explicit CSS each time. */
    color: inherit;
}

.form-wrapper{
    /* Invoking CSS-Flexbox. This allows
    us powerful alignment capabilities.
    Content is displayed in form of containers
    and they are treated as arrays inside
    the flexbox. Also, helps with reponsiveness */
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
}

.form-wrapper img{
    /* Adding an absolute position makes the 
    location of the image constant/immovable
    throughout the screen */
    position: absolute;
    width: 100%;
    height: 100%;
    /* The image is clipped in-order to 
    fit in the screen without changing the
    size or the aspect-ratio */
    object-fit: cover;
}

.login{
    position: relative;
    max-width: 400px;
    width: 100%;
    padding: 2em;
    text-align: center; 
    background-color: rgb(255 255 255 / 3%);
    border: 1px solid rgb(255 255 255 / 15%);
    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);
    border-radius: var(--radius);
}

form > div{
    position: relative;
    margin: 2em 0;
    
}

/* We are writing CSS rules for input fields
inside out div which are not carrying the classname 
.checkbox ; hence the pseudo-class selector*/
form div:not(.checkbox) input{
    outline: 0;
    width: 100%;
    height: 50px;
    padding: 0 1em;
    border-radius: var(--radius);
    background-color: transparent;
    border: 1px solid rgb(255 255 255 / 15%);
    color: var(--white-color);
    transition: border-color .3s;
}

form div:not(.checkbox) :where(label, i){
    position: absolute;
    top: 50%;
    left: 1em;
    transform: translateY(-50%);
    transition: top .3s, font-size .3s, color .3s;
}

/* Targetting the tags which contain the icons
for username and password */
form div:not(.checkbox) i {
    right: 1em;
    left: auto;
}

/* Movement of the "username" and "password" text pieces to
above the input field. */
form div:not(.checkbox) input:focus ~ label, 
form div:not(.checkbox) input:not(:placeholder-shown):not(:focus) ~ label {
    top: -10px;
    font-size: 13px;
    color: var(--primary-color);
}

form div:not(.checkbox) input:focus, 
form div:not(.checkbox) input:not(:placeholder-shown):not(:focus){
    border-color: rgb(255, 255, 255 / 30%);
}

form .checkbox {
    text-align: left;
    margin-top: -1.5em;
    display: flex;
    align-items: center;
    gap: 0.5em;
}

form .checkbox label {
    font: 14px;
}

form .checkbox input {
    appearance: none;
    /* Webkit Appearence is a NON-STANDARD property which 
    should preferably not be used. */
    /* -webkit-appearance: none; */
    margin: 0;
    position: relative;
    width: 1em;
    height: 1em;
    border: 1px solid rgb(255 255 255 / 15%);
    border-radius: var(--radius);

}

form .checkbox input::before{
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.6);
    width: 8px;
    height: 8px;
    background-color: rgb(255 255 255 / 15%);
    border-radius: var(--radius);
    transition: transform .3s, background-color .3s, border-color .3s;
}

form .checkbox input:checked {
    border-color: var(--primary-color);
}

form .checkbox input:checked::before{
    background-color: var(--primary-color);
    transform: translate(-50%, -50%) scale(1);
}

input, button {
    font-size: inherit;
}

form div button {
    border: 0;
    outline: 0;
    width: 100%;
    height: 50px;
    background-color: var(--primary-color);
    color: var(--white-color);
    border-radius: var(--radius);
    transition: background-color .3s;
}

button:hover{
    background-color: #90465f;

}

form .split {
    /* Initializing flex-box setup */
    display: flex;
    /* Takes up all the space on the line by adding space
    in between them */
    justify-content: space-between;

}

form .split a:hover{
    text-decoration: underline;

}